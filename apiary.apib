– 3FORMAT: 1A



# Coms Management

Coms Management API allows for front-end developmet testing of the Coms Managment app.

Notes:
<!----> code fold cmd+opt+0
<!----> code unfold cmd+opt+shif+0
<!----> Cmd-Alt-H

# Group Users
## Users – w/o id [/users]

### List All Users [GET]

+ Response 200 (application/json)

        {
        id: "92061fc4-690a-47ba-b3af-64cd6a8909da",
        username: "Star",
        password: "#aHashedPassword#",
        position: "admin",
        about: "Office Dispatch",
        avatar: "https://avatar-url.net",
        },
        {
        id: "a1679fd1-c7ab-41a3-a3cb-6019cbc35f0e",
        username: "Sun",
        password: "#aHashedPassword#",
        position: "technician",
        about: "Lead field technician.",
        avatar: "https://avatar-url.net",
        },
        {
        id: "c01d5d70-e837-4164-b62f-143e7a2a7bfa",
        username: "Moon",
        password: "#aHashedPassword#",
        position: "management",
        about: "Office manager.",
        avatar: "https://avatar-url.net",
        }
    
+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not list users"
        }

### Create User [POST]

+ Request (application/json)

        {
        id: "92061fc4-690a-47ba-b3af-64cd6a8909da",
        username: "Star",
        password: "#aHashedPassword#",
        position: "admin",
        about: "Office Dispatch",
        avatar: "https://avatar-url.net",
        }

+ Request 201 (application/json)

        {
        id: "92061fc4-690a-47ba-b3af-64cd6a8909da",
        username: "Star",
        password: "#aHashedPassword#",
        position: "admin",
        about: "Office Dispatch",
        avatar: "https://avatar-url.net",
        }
        
+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not create notification"
        }

## Users – w/ id [/users{?id}]

+ Parameters

    + id (required, string, `92061fc4-690a-47ba-b3af-64cd6a8909da`)

### List One User [GET]   

+ Response 200 (application/json)

        {
        id: "92061fc4-690a-47ba-b3af-64cd6a8909da",
        username: "Star",
        password: "#aHashedPassword#",
        position: "admin",
        about: "Office Dispatch",
        avatar: "https://avatar-url.net",
        }

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not list notification"
        }

### Update User [PUT]

+ Request (application/json; charset=utf-8)

        {
        id: "92061fc4-690a-47ba-b3af-64cd6a8909da",
        username: "Star",
        password: "#aHashedPassword#",
        position: "admin",
        about: "Office Dispatch",
        avatar: "https://avatar-url.net",
        }

+ Response 200 (application/json; charset=utf-8)

        {
        id: "92061fc4-690a-47ba-b3af-64cd6a8909da",
        username: "Star",
        password: "#aHashedPassword#",
        position: "admin",
        about: "Office Dispatch & Front Desk",
        avatar: "https://avatar-url.net",
        }

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not update notification"
        }
        
### Delete User [DELETE]

+ Response 200

        }
        "comment": "user successfully deleted"
        {

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not delete notification"
        }

# Group Notifications

## Notifications – w/o id [/notifications]

### List All Notifications [GET]

+ Response 200 (application/json)

        {
        id: "f9700fa5-e3b2-4c5d-9fc3-10b883b84fcc",
        flags: "office",
        // TODO – to get new fk ids to populate
        audiosId: "755ccc52-4dbb-43e8-afbf-3e9dc82b7a65",
        imagesId: "96aef80b-5f7b-491d-a44d-1796989103a7",
        notificationTextId: "7465fd03-27a0-49cc-bd0c-6692a1067bc6",
        videosId: "c3a79c9a-b6e6-4317-bf2c-adad52f8f310",
        }
    
+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not list  notifications"
        }

### Create Notification [POST]

+ Request (application/json)

        {
        id: "f9700fa5-e3b2-4c5d-9fc3-10b883b84fcc",
        flags: "office",
        // TODO – to get new fk ids to populate
        audiosId: "755ccc52-4dbb-43e8-afbf-3e9dc82b7a65",
        imagesId: "96aef80b-5f7b-491d-a44d-1796989103a7",
        notificationTextId: "7465fd03-27a0-49cc-bd0c-6692a1067bc6",
        videosId: "c3a79c9a-b6e6-4317-bf2c-adad52f8f310",
        }
        
+ Request (application/json)

        {
        id: "f9700fa5-e3b2-4c5d-9fc3-10b883b84fcc",
        flags: "office",
        // TODO – to get new fk ids to populate
        audiosId: "755ccc52-4dbb-43e8-afbf-3e9dc82b7a65",
        imagesId: "96aef80b-5f7b-491d-a44d-1796989103a7",
        notificationTextId: "7465fd03-27a0-49cc-bd0c-6692a1067bc6",
        videosId: "c3a79c9a-b6e6-4317-bf2c-adad52f8f310",
        }
        
+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not create notification"
        }

## Notifications – w/ id [/notifications{?id}]

+ Parameters

    + id (required, string, `f9700fa5-e3b2-4c5d-9fc3-10b883b84fcc`)

### List One Notifications [GET]   

+ Response 200 (application/json)

        {
        id: "f9700fa5-e3b2-4c5d-9fc3-10b883b84fcc",
        flags: "office",
        // TODO – to get new fk ids to populate
        audiosId: "755ccc52-4dbb-43e8-afbf-3e9dc82b7a65",
        imagesId: "96aef80b-5f7b-491d-a44d-1796989103a7",
        notificationTextId: "7465fd03-27a0-49cc-bd0c-6692a1067bc6",
        videosId: "c3a79c9a-b6e6-4317-bf2c-adad52f8f310",
        }

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not list notification"
        }

### Update Notification [PUT]

+ Request (application/json; charset=utf-8)

        {
        id: "f9700fa5-e3b2-4c5d-9fc3-10b883b84fcc",
        flags: "office",
        // TODO – to get new fk ids to populate
        audiosId: "755ccc52-4dbb-43e8-afbf-3e9dc82b7a65",
        imagesId: "96aef80b-5f7b-491d-a44d-1796989103a7",
        notificationTextId: "7465fd03-27a0-49cc-bd0c-6692a1067bc6",
        videosId: "c3a79c9a-b6e6-4317-bf2c-adad52f8f310",
        }
        
+ Request (application/json)

        {
        id: "f9700fa5-e3b2-4c5d-9fc3-10b883b84fcc",
        flags: "all",
        // TODO – to get new fk ids to populate
        audiosId: "755ccc52-4dbb-43e8-afbf-3e9dc82b7a65",
        imagesId: "96aef80b-5f7b-491d-a44d-1796989103a7",
        notificationTextId: "7465fd03-27a0-49cc-bd0c-6692a1067bc6",
        videosId: "c3a79c9a-b6e6-4317-bf2c-adad52f8f310",
        }

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not update notification"
        }
        
### Delete Notification [DELETE]

+ Response 200

        }
        "comment": "notification successfully deleted"
        {

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not delete notification"
        }
        
# Group Notifications Texts

## Notifications Texts – w/o id [/notificationstexts]

### List All Notifications Texts [GET]

+ Response 200 (application/json)

        [
        {
        id: "7465fd03-27a0-49cc-bd0c-6692a1067bc6",
        messageText: "Vis blandit percipitur disputationi te, mea prompta gubergren ad. Eu natum accusam consulatu vim, vim zril utamur admodum in, nulla iudico ei vis. Vix an purto instructior. In sea facilis vivendo tincidunt, ad mel vidisse eleifend, sed id causae signiferumque. Pro omnes primis democritum ex.",
        },
        ],        

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not list images"
        }

### Create Notifications Texts [POST]

+ Request (application/json)

        {
        id: "7465fd03-27a0-49cc-bd0c-6692a1067bc6",
        messageText: "Vis blandit percipitur disputationi te, mea prompta gubergren ad. Eu natum accusam consulatu vim, vim zril utamur admodum in, nulla iudico ei vis. Vix an purto instructior. In sea facilis vivendo tincidunt, ad mel vidisse eleifend, sed id causae signiferumque. Pro omnes primis democritum ex.",
        }
        
+ Response 201 (application/json)

        {
        id: "7465fd03-27a0-49cc-bd0c-6692a1067bc6",
        messageText: "Vis blandit percipitur disputationi te, mea prompta gubergren ad. Eu natum accusam consulatu vim, vim zril utamur admodum in, nulla iudico ei vis. Vix an purto instructior. In sea facilis vivendo tincidunt, ad mel vidisse eleifend, sed id causae signiferumque. Pro omnes primis democritum ex.",
        }
            
+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not create image"
        }

## Notifications Texts – w/ id [/notificationstexts{?id}]

+ Parameters

    + id (required, string, `7465fd03-27a0-49cc-bd0c-6692a1067bc6`)

### List One Notifications Texts [GET]   

+ Response 200 (application/json)

        {
        id: "7465fd03-27a0-49cc-bd0c-6692a1067bc6",
        messageText: "Vis blandit percipitur disputationi te, mea prompta gubergren ad. Eu natum accusam consulatu vim, vim zril utamur admodum in, nulla iudico ei vis. Vix an purto instructior. In sea facilis vivendo tincidunt, ad mel vidisse eleifend, sed id causae signiferumque. Pro omnes primis democritum ex.",
        }

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could get image"
        }

### Update Notifications Texts [PUT]

+ Request (application/json; charset=utf-8)

        {
        id: "7465fd03-27a0-49cc-bd0c-6692a1067bc6",
        messageText: "Vis blandit percipitur disputationi te, mea prompta gubergren ad. Eu natum accusam consulatu vim, vim zril utamur admodum in, nulla iudico ei vis. Vix an purto instructior. In sea facilis vivendo tincidunt, ad mel vidisse eleifend, sed id causae signiferumque. Pro omnes primis democritum ex.",
        }

+ Response 200 (application/json; charset=utf-8)

        {
        id: "7465fd03-27a0-49cc-bd0c-6692a1067bc6",
        messageText: "New Text! Vis blandit percipitur disputationi te, mea prompta gubergren ad. Eu natum accusam consulatu vim, vim zril utamur admodum in, nulla iudico ei vis. Vix an purto instructior. In sea facilis vivendo tincidunt, ad mel vidisse eleifend, sed id causae signiferumque. Pro omnes primis democritum ex.",
        }

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not update image"
        }
        
### Delete Notifications Texts [DELETE]

+ Response 200

        }
        "comment": "notification text successfully deleted"
        {

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not delete notification text"
        }
        
# Group Images

## Images – w/o id [/images]

### List All Images [GET]

+ Response 200 (application/json)

        {
        id: "96aef80b-5f7b-491d-a44d-1796989103a7",
        imageLink1: "https://live.staticflickr.com/2129/5785570987_9c617a047e_h.jpg",
        imageLink2: "https://live.staticflickr.com/6105/6297421204_9cff672fa3_h.jpg",
        imageLink3: "https://live.staticflickr.com/3511/3210747453_603f87a69a_c.jpg",
        }        

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not list images"
        }

### Create Image [POST]

+ Request (application/json)

        {
        id: "96aef80b-5f7b-491d-a44d-1796989103a7",
        imageLink1: "https://live.staticflickr.com/2129/5785570987_9c617a047e_h.jpg",
        imageLink2: "https://live.staticflickr.com/6105/6297421204_9cff672fa3_h.jpg",
        imageLink3: "https://live.staticflickr.com/3511/3210747453_603f87a69a_c.jpg",
        }     
        
+ Response 201 (application/json)

        {
        id: "96aef80b-5f7b-491d-a44d-1796989103a7",
        imageLink1: "https://live.staticflickr.com/2129/5785570987_9c617a047e_h.jpg",
        imageLink2: "https://live.staticflickr.com/6105/6297421204_9cff672fa3_h.jpg",
        imageLink3: "https://live.staticflickr.com/3511/3210747453_603f87a69a_c.jpg",
        }     
            
+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not create image"
        }

## Images – w/ id [/images{?id}]

+ Parameters

    + id (required, string, `96aef80b-5f7b-491d-a44d-1796989103a7`)

### List One Images [GET]   

+ Response 200 (application/json)

        {
        id: "96aef80b-5f7b-491d-a44d-1796989103a7",
        imageLink1: "https://live.staticflickr.com/2129/5785570987_9c617a047e_h.jpg",
        imageLink2: "https://live.staticflickr.com/6105/6297421204_9cff672fa3_h.jpg",
        imageLink3: "https://live.staticflickr.com/3511/3210747453_603f87a69a_c.jpg",
        }  

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not get image"
        }

### Update Image [PUT]

+ Request (application/json; charset=utf-8)

        {
        id: "96aef80b-5f7b-491d-a44d-1796989103a7",
        imageLink1: "https://live.staticflickr.com/2129/5785570987_9c617a047e_h.jpg",
        imageLink2: "https://live.staticflickr.com/6105/6297421204_9cff672fa3_h.jpg",
        imageLink3: "https://live.staticflickr.com/3511/3210747453_603f87a69a_c.jpg",
        createdAt: new Date(),
        updatedAt: new Date(),
        }     

+ Response 200 (application/json; charset=utf-8)

        {
        id: "96aef80b-5f7b-491d-a44d-1796989103a7",
        imageLink1: "https://live.staticflickr.com/2129/5785570987_9c617a047e_h.jpg",
        }     
+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not update image"
        }
        
### Delete Image [DELETE]

+ Response 204

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not delete image"
        "comment": "Image can not be updated or deleted, switch response code to 403"
        }
        
       
# Group Audios

## Audio – w/o id [/audios]

### List All Audio [GET]

+ Response 200 (application/json)

        {
        id: "755ccc52-4dbb-43e8-afbf-3e9dc82b7a65",
        audioLink1: "http://amclassical.com/mp3/amclassical_bon_sonata_in_g_minor_mvt_1.mp3",
        audioLink2: "http://amclassical.com/mp3/amclassical_joplin_the_entertainer_rag.mp3",
        }

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not list audio files"
        }

### Create Audio [POST]

+ Request (application/json)

        {
        id: "755ccc52-4dbb-43e8-afbf-3e9dc82b7a65",
        audioLink1: "http://amclassical.com/mp3/amclassical_bon_sonata_in_g_minor_mvt_1.mp3",
        audioLink2: "http://amclassical.com/mp3/amclassical_joplin_the_entertainer_rag.mp3",
        }
        
+ Response 201 (application/json)

        {
        id: "755ccc52-4dbb-43e8-afbf-3e9dc82b7a65",
        audioLink1: "http://amclassical.com/mp3/amclassical_bon_sonata_in_g_minor_mvt_1.mp3",
        audioLink2: "http://amclassical.com/mp3/amclassical_joplin_the_entertainer_rag.mp3",
        }
            
+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not create audio file"
        }

## Audio – w/ id [/audios{?id}]

+ Parameters

    + id (required, string, `755ccc52-4dbb-43e8-afbf-3e9dc82b7a65`)

### List One Audio [GET]   

+ Response 200 (application/json)

        {
        id: "755ccc52-4dbb-43e8-afbf-3e9dc82b7a65",
        audioLink1: "http://amclassical.com/mp3/amclassical_bon_sonata_in_g_minor_mvt_1.mp3",
        audioLink2: "http://amclassical.com/mp3/amclassical_joplin_the_entertainer_rag.mp3",
        }

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could get audio file"
        }

### Update Audio [PUT]

+ Request (application/json; charset=utf-8)

        {
        id: "755ccc52-4dbb-43e8-afbf-3e9dc82b7a65",
        audioLink1: "http://amclassical.com/mp3/amclassical_bon_sonata_in_g_minor_mvt_1.mp3",
        audioLink2: "http://amclassical.com/mp3/amclassical_joplin_the_entertainer_rag.mp3",
        }

+ Response 200 (application/json; charset=utf-8)

         {
        id: "755ccc52-4dbb-43e8-afbf-3e9dc82b7a65",
        audioLink1: "http://amclassical.com/mp3/amclassical_bon_sonata_in_g_minor_mvt_1.mp3",
        }

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not update audio file"
        }
        
### Delete Audio [DELETE]

+ Response 204

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not delete audio file"
        "comment": "audio can not be updated or deleted, switch response code to 403"
        }


# Group Videos

## Video – w/o id [/videos]

### List All Video [GET]

+ Response 200 (application/json)

        {
        id: "c3a79c9a-b6e6-4317-bf2c-adad52f8f310",
        videoLink1: "https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4",
        videoLink2: "https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4",
        }        

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not list video files"
        }

### Create Video [POST]

+ Request (application/json)

        {
        id: "c3a79c9a-b6e6-4317-bf2c-adad52f8f310",
        videoLink1: "https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4",
        videoLink2: "https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4",
        }  
        
+ Response 201 (application/json)

        {
        id: "c3a79c9a-b6e6-4317-bf2c-adad52f8f310",
        videoLink1: "https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4",
        videoLink2: "https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4",
        }  
            
+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not create video file"
        }

## Video – w/ id [/videos{?id}]

+ Parameters

    + id (required, string, `c3a79c9a-b6e6-4317-bf2c-adad52f8f310`)

### List One Video [GET]   

+ Response 200 (application/json)

        {
        id: "c3a79c9a-b6e6-4317-bf2c-adad52f8f310",
        videoLink1: "https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4",
        videoLink2: "https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4",
        }  

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could get video file"
        }

### Update Video [PUT]

+ Request (application/json; charset=utf-8)

        {
        id: "c3a79c9a-b6e6-4317-bf2c-adad52f8f310",
        videoLink1: "https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4",
        videoLink2: "https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4",
        }  

+ Response 200 (application/json; charset=utf-8)

        {
        id: "c3a79c9a-b6e6-4317-bf2c-adad52f8f310",
        videoLink1: "https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4",
        }  

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not update video file"
        }
        
### Delete Video [DELETE]

+ Response 204

+ Response 401 (application/json; charset=utf-8)

        {
        "error": "could not delete video file"
        "comment": "video can not be updated or deleted, switch response code to 403"
        }